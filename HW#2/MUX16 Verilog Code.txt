module Tst(SW,HEX0,HEX1,HEX2,HEX3);
input[8:0]SW;
output [0:6]HEX0,HEX1,HEX2,HEX3;
wire [3:0] a,b;
wire [15:0] out,outda,outdb;
wire sel;
assign a=SW [3:0] ;
assign b= SW [7:4];
assign sel= SW[8];
assign e=1'b1;



 hex7seg hjhj (out[3:0], HEX0);
  hex7seg rythj (out[7:4], HEX1);
   hex7seg hjuoyj (out[11:8], HEX2);
  hex7seg rytu7uj (out[15:12], HEX3);
  decoder_4to16  adec(e,a,outda);
  decoder_4to16  bdec(e,b,outdb);

 
mux16 um(out[0],outda[0], outdb[0], sel);
mux16 aaa(out[1],outda[1], outdb[1], sel);
mux16 HHs(out[2],outda[2], outdb[2], sel);
mux16 HHd(out[3],outda[3], outdb[3], sel);
mux16 HHq(out[4],outda[4], outdb[4], sel);
mux16 HHe(out[5],outda[5], outdb[5], sel);
mux16 HHb(out[6],outda[6], outdb[6], sel);
mux16 mu(out[7],outda[7], outdb[7], sel);
mux16 xx(out[8],outda[8], outdb[8], sel);
mux16 aa(out[9],outda[9], outdb[9], sel);
mux16 Hs(out[10],outda[10], outdb[10], sel);
mux16 Hd(out[11],outda[11], outdb[11], sel);
mux16 Hq(out[12],outda[12], outdb[12], sel);
mux16 He(out[13],outda[13], outdb[13], sel);
mux16 Hb(out[14],outda[14], outdb[14], sel);
mux16 Hl(out[15],outda[15], outdb[15], sel);

endmodule
	
module mux1(out ,a, b, sel);
   input a,b,sel;
  output out;
  wire w1,w2,w3;
  nand Nand1(w1,sel,b);
  nand Nan2(w2,sel,sel);
  nand Nan3(w3,a,w2);
  nand Nand4(out,w1,w3);
  endmodule 
  
  
  module mux16(out ,a, b, sel);
  input[15:0] a,b;
  input  sel;
  output [15:0] out;
  mux1 mux0(out[0],a[0],b[0],sel);
  mux1 mux2(out[1],a[1],b[1],sel);
  mux1 mux3(out[2],a[2],b[2],sel);
  mux1 mux4(out[3],a[3],b[3],sel);
  mux1 mux5(out[4],a[4],b[4],sel);
  mux1 mux6(out[5],a[5],b[5],sel);
  mux1 mux7(out[6],a[6],b[6],sel);
  mux1 mux8(out[7],a[7],b[7],sel);
  mux1 mux9(out[8],a[8],b[8],sel);
  mux1 mux10(out[9],a[9],b[9],sel);
  mux1 mux11(out[10],a[10],b[10],sel);
  mux1 mux12(out[11],a[11],b[11],sel);
  mux1 mux13(out[12],a[12],b[12],sel);
  mux1 mux14(out[13],a[13],b[13],sel);
  mux1 mux15(out[14],a[14],b[14],sel);
  mux1 mux16(out[15],a[15],b[15],sel);
endmodule

module hex7seg (hex, display);
	input [3:0] hex;
	output [0:6] display;

	reg [0:6] display;

	/*
	 *       0  
	 *      ---  
	 *     |   |
	 *    5|   |1
	 *     | 6 |
	 *      ---  
	 *     |   |
	 *    4|   |2
	 *     |   |
	 *      ---  
	 *       3  
	 */
	always @ (hex)
		case (hex)
			4'h0: display = 7'b0000001;
			4'h1: display = 7'b1001111;
			4'h2: display = 7'b0010010;
			4'h3: display = 7'b0000110;
			4'h4: display = 7'b1001100;
			4'h5: display = 7'b0100100;
			4'h6: display = 7'b0100000;
			4'h7: display = 7'b0001111;
			4'h8: display = 7'b0000000;
			4'h9: display = 7'b0000100;
			4'hA: display = 7'b0001000;
			4'hb: display = 7'b1100000;
			4'hC: display = 7'b0110001;
			4'hd: display = 7'b1000010;
			4'hE: display = 7'b0110000;
			4'hF: display = 7'b0111000;
		endcase
endmodule

module decoder_4to16 (
	input  enable,
	input [3:0] binary_in,
	output reg [15:0] decoder_out
);

always @ (enable or binary_in)
begin
  if (enable) begin
    case (binary_in)
      4'h0 : decoder_out = 16'h0001;
      4'h1 : decoder_out = 16'h0002;
      4'h2 : decoder_out = 16'h0004;
      4'h3 : decoder_out = 16'h0008;
      4'h4 : decoder_out = 16'h0010;
      4'h5 : decoder_out = 16'h0020;
      4'h6 : decoder_out = 16'h0040;
      4'h7 : decoder_out = 16'h0080;
      4'h8 : decoder_out = 16'h0100;
      4'h9 : decoder_out = 16'h0200;
      4'hA : decoder_out = 16'h0400;
      4'hB : decoder_out = 16'h0800;
      4'hC : decoder_out = 16'h1000;
      4'hD : decoder_out = 16'h2000;
      4'hE : decoder_out = 16'h4000;
      4'hF : decoder_out = 16'h8000;
      default : decoder_out = 0;
    endcase
  end
  else begin
    decoder_out = 0;
  end
end

endmodule

module testb;
  reg [15:0] a,b;
  reg sel;
  wire [15:0] out;
  mux16 test(out,a,b,sel);
 initial
begin
#100; 
a=16'b0000000000000000; b=16'b0001001000110100; sel=1;
#1 $display("out=%b",out);
a=16'b0001001000110100; b=16'b0000000000000000; sel=0;
#1 $display("out=%b",out);
end 
endmodule
