module SequentialInputCapture (
    input wire clock,        // Clock signal
    input wire reset,        // Reset signal
    input wire enable,       // Enable signal
    input wire [15:0] data_input,  // 16-bit data input
    output wire [15:0] output [7:0] // 16-bit output for 8 channels
);

reg [15:0] input_data [7:0]; // Registers to store input data for each channel
reg [2:0] state;             // State machine for capturing inputs

always @(posedge clock or posedge reset) begin
    if (reset) begin
        for (i = 0; i < 8; i = i + 1) begin
            input_data[i] <= 16'b0; // Reset input data for each channel
        end
        state <= 3'b000;   // Reset the state machine
    end else if (enable) begin
        case (state)
            3'b000: if (data_input) state <= 3'b001;
            3'b001: begin
                for (i = 0; i < 8; i = i + 1) begin
                    input_data[i] <= {input_data[i][14:0], data_input};
                end
                state <= 3'b010;
            end
            3'b010: state <= 3'b000;
        endcase
    end
end

assign {output[7:0]} = input_data;

endmodule
