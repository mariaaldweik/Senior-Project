
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output //ALU Out= woutM
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    And(a=instruction[15],b=instruction[5],out=w1);
    Mux16(a=instruction,b=woutM,sel=w1,out=ouToAreg);
    ADRegister(in=ouToAreg,load=true,reset=reset,out=outAreg,out[0..14]=addressM);
    Mux16(a=inM,b=outAreg,sel=instruction[12],out=alubin);

    //pc

    And(a=instruction[5],b=instruction[4],out=w2);
    ADRegister(in=woutM,load=w2,reset=reset,out=wDRegiste);
    ALU(x=wDRegiste,y=outAreg,no=instruction[6],f=instruction[7],ny=instruction[8],zy=instruction[9],nx=instruction[10],zx=instruction[11],out=woutM,zr=wzr,ng=wng);
    

    //jump
    Or(a=wng,b=wzr,out=ngzr,out=w3);
    Not(in=w3,out=gt,out=w4);
And(a=wng,b=instruction[2],out=jlt,out=w5);
And(a=wzr,b=instruction[1],out=jeq,out=w6);
And(a=w4,b=instruction[0],out=jgt,out=w7);
Or(a=w5,b=w6,out=ple,out=w8);
Or(a=w8,b=w7,out=pass);

And(a=instruction[15],b=pass,out=pcload);
Or4way(a=instruction[0],b=instruction[1],c=instruction[3],d=false,out=wincr);//code up
PC(in=outAreg,load=pcload,inc=wincr,out[0..14]=pc);
And(a=instruction[15],b=instruction[3],out= writeM);

}
