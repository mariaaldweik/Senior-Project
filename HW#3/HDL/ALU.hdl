 /* ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.
      Mux16(a=x,b=false,sel=zx,out=w1);
      Mux16(a=y,b=false,sel=zy,out=w2);
      Not16(in=w1,out=w11);
      Mux16(a=w1,b=w11,sel=nx,out=w3);
      Not16(in=w2,out=w12);
      Mux16(a=w2,b=w12,sel=ny,out=w4);
      //Xor16(a=w1,b=nx,out=w3);
      //Xor16(a=w2,b=ny,out=w4);
      Add16(a=w3,b=w4,out=w6);
      And16(a=w3,b=w4,out=w7);
      Mux16(a=w7,b=w6,sel=f,out=w8);
      Not16(in=w8,out=w9);
      Mux16(a=w8,b=w9,sel=no,out=out,out=w10,out[0..7]=w15,out[8..15]=w16,out[15]=w17);
      Or8Way(in=w15,out=w13);
      Or8Way(in=w16,out=w14);
Or(a=w13,b=w14,out=w18);
Not(in=w18,out=zr);
      Or(a=w17,b=false,out=ng);
}